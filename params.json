{"name":"Sociocast-android","tagline":"Sociocast Android Library","body":"![Alt text](/images/logo.png)\r\n\r\n#Sociocast Android Library\r\n\r\n##Overview\r\n\r\nThe Sociocast Android Library provides Adroid developers with wrapper functionality for Sociocast REST API methods. The Library provides basic HTTP request/response functionality as well as the general queueing of entity observations when the device does not have network connectivity. Entity Observations are stored in a SQL Lite database, wrapped by a [Content Provider](http://developer.android.com/guide/topics/providers/content-providers.html) class.   \r\n\r\nThe library utilizes the Android [`IntentService`](http://developer.android.com/reference/android/app/IntentService.html) class which handles asynchronous requests (`Intent`) on demand. `IntentService` Clients send requests through `startService(Intent)` calls; the service is started as needed, handles each Intent in turn using a worker thread, and stops itself when it runs out of work. \r\n\r\nAdditionally, the library use its `QueuedEventContentProvider` to provide a locally stored queue for entity observations when there is no network connectivity. This class is backed by a [`SQLiteDatabase`](http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html). \r\n\r\n##Installation\r\n\r\nTo install the Sociocast Android Library, download and place the `sociocast-android.jar` (located in the [/bin/](https://github.com/sociocast/sociocast-android/tree/master/sociocast-android/bin) directory) into your project's classpath. Also make sure that the `AndroidManifest.xml` file for your application contains the following permissions within the `manifest` tag:\r\n\r\n    <!-- ADDED FOR SOCIOCAST LIBRARY USE -->\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    \r\nAdditionally, the following application components are required as well within the `application` tag:\r\n\r\n    <!-- START: ADDED FOR SOCIOCAST LIBRARY USE -->\r\n    <service android:name=\"com.sociocast.android.service.SociocastService\" />  \r\n    <provider android:authorities=\"com.sociocast.android.provider.events\" android:name=\"com.sociocast.android.content_provider.QueuedEventContentProvider\"/>      \r\n    <receiver android:name=\"com.sociocast.android.receiver.ConnectivityChangedReceiver\" enabled=\"false\">\r\n        <intent-filter>\r\n            <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\" />\r\n            <action android:name=\"com.sociocast.android.retry_queued_items\" />\r\n        </intent-filter>\r\n    </receiver>        \r\n    <!-- END: ADDED FOR SOCIOCAST LIBRARY USE -->\r\n\r\nFor more information on the AndroidManifest.xml file see [this link](http://developer.android.com/guide/topics/manifest/manifest-intro.html). Additionally, you will find a sample Sociocast Android Library client [here](https://github.com/sociocast/sociocast-android/tree/master/sociocast-android-client).\r\n\r\n##Initialization \r\n\r\nYou can find usage examples in the [Sociocast Android Library](https://github.com/sociocast/sociocast-android/tree/master/sociocast-android-client). To initialize the Sociocast Android Library, from your app, you can use the following command:\r\n\r\n    // Create instance of Sociocast Android Library    \r\n    Sociocast sociocast = Sociocast.newInstance(this, apikey, secret, clid, true);\r\n    \r\nMake sure to pass in your `apikey`, `secret`, `clid` (Client ID), and whether to use Sandbox (true) or Production (false).\r\n\r\nYou must also set a `Receiver` that the library will use to return any response results. For instance:\r\n\r\n    // Create the ResultReceiver\r\n    ResultReceiver receiver = new ResultReceiver(new Handler()) {\r\n        @Override\r\n        protected void onReceiveResult(int resultCode, Bundle resultData) {\r\n            loading = false;\r\n            if (resultData != null && resultData.containsKey(SociocastConstants.REST_RESULT)) {\r\n                onRESTResult(resultCode, resultData);\r\n            }\r\n            else {\r\n                onRESTResult(resultCode, null);\r\n            }\r\n        }            \r\n    };\r\n        \r\n    sociocast.setReceiver(receiver);\r\n\r\n##Usage\r\nTo send and retrieve data from Sociocast using the Sociocast Android Library you can now use the `Sociocast` object. The `Sociocast` class implements the `SociocastAPI` interface which defines the basic Sociocast REST API methods.\r\n\r\n###`sociocast.entityObserve`\r\nThe `sociocast.entityObserve` method wraps the `/entity/observe` Sociocast REST API call. To submit a `sociocast.entityObserve` call, you must create an `EntityObservation` object. For instance:\r\n\r\n    EntityObservation obs = new EntityObservation();\r\n    obs.setEid(eid);\r\n    obs.setEvt(\"view\");\r\n    obs.setAttribute(\"url\",\"http://www.sociocast.com\");\t\r\n    obs.setClid(clid);\r\n    obs.setTimestamp(new Date()); \r\n    \r\nYou can then submit the `sociocast.entityObserve` call:\r\n\r\n    sociocast.entityObserve(obs);\r\n    \r\n###`sociocast.entityAttributes`\r\nThe `sociocast.entityAttributes` method wraps the `/entity/attributes` Sociocast REST API call. It is used to set, add, and delete entity attributes. You must submit a `EntityAttributes` object. For instance:\r\n\r\n    EntityAttributes entityAttribs = new EntityAttributes();\r\n    entityAttribs.setEid(eid);\r\n    entityAttribs.setClid(clid);\r\n    Map<String, Object> setAttribs = new HashMap<String, Object>();\r\n    setAttribs.put(\"user_age\", \"18 - 39\");\r\n    // Set Attributes\r\n    entityAttribs.setAttributes(setAttribs);\r\n    // Add Attributes\r\n    entityAttribs.addAttributes(setAttribs);\r\n    // Delete Attributes\r\n    entityAttribs.deleteAttributes(setAttribs);\r\n\r\nYou can then submit the `sociocast.entityAttributes` call:\r\n\r\n    sociocast.entityAttributes(entityAttribs);\r\n    \r\n###`sociocast.contentProfile`\r\nThe `sociocast.contentProfile` wraps the `/content/profile` Sociocast REST API call. It is used to retrieve a content classification, once the content has been classified by the Sociocast platform. To use the method pass in a `url` as a `String` value and `humread` as a `boolean` value. When `humread` is set to `true`, Sociocast will return human readable classifications using the Sociocast Taxonomy (as oppose to internal content IDs). For instance:\r\n\r\n    this.sociocast.contentProfile(\"http://www.cnn.com\", true);\r\n    \r\n###`sociocast.entityProfile`\r\nThe `sociocast.entityProfile` wraps the `/entity/profile` Sociocast REST API call. It is used to retrive a profile for an entity. To use the method you must pass in the `eid` (entity ID) as a `String` value, `humread` as a `boolean` value, and the set of `attributes` to return as a `List<String>`. For instance:\r\n\r\n    ArrayList<String> attributes = new ArrayList<String>();\r\n    attributes.add(\"cls.ctx\");\r\n    this.sociocast.entityProfile(eid, true, attributes);\r\n    \r\n##Accessing the JSON Response\r\nTo access the JSON response object from the methods above, you can grab the result `Bundle` from the `Handler` and request the String `SociocastConstants.REST_RESULT`. For instance:\r\n\r\n    protected void onReceiveResult(int resultCode, Bundle resultData) {\r\n        String json = resultData.getString(SociocastConstants.REST_RESULT);    \r\n        // Parse JSON with JSONObject(json) throws JSONException\r\n    }\r\n    \r\nYou can parse the JSON response string using `JSONObject(String json) throws JSONException`. \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}